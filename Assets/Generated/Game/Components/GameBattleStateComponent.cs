//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity battleStateEntity { get { return GetGroup(GameMatcher.BattleState).GetSingleEntity(); } }
    public BattleStateComponent battleState { get { return battleStateEntity.battleState; } }
    public bool hasBattleState { get { return battleStateEntity != null; } }

    public GameEntity SetBattleState(Entitas.Battle.Enums.BattleState newCurrentBattleState, Entitas.Battle.Enums.BattleState newPreviousBattleState) {
        if (hasBattleState) {
            throw new Entitas.EntitasException("Could not set BattleState!\n" + this + " already has an entity with BattleStateComponent!",
                "You should check if the context already has a battleStateEntity before setting it or use context.ReplaceBattleState().");
        }
        var entity = CreateEntity();
        entity.AddBattleState(newCurrentBattleState, newPreviousBattleState);
        return entity;
    }

    public void ReplaceBattleState(Entitas.Battle.Enums.BattleState newCurrentBattleState, Entitas.Battle.Enums.BattleState newPreviousBattleState) {
        var entity = battleStateEntity;
        if (entity == null) {
            entity = SetBattleState(newCurrentBattleState, newPreviousBattleState);
        } else {
            entity.ReplaceBattleState(newCurrentBattleState, newPreviousBattleState);
        }
    }

    public void RemoveBattleState() {
        battleStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public BattleStateComponent battleState { get { return (BattleStateComponent)GetComponent(GameComponentsLookup.BattleState); } }
    public bool hasBattleState { get { return HasComponent(GameComponentsLookup.BattleState); } }

    public void AddBattleState(Entitas.Battle.Enums.BattleState newCurrentBattleState, Entitas.Battle.Enums.BattleState newPreviousBattleState) {
        var index = GameComponentsLookup.BattleState;
        var component = (BattleStateComponent)CreateComponent(index, typeof(BattleStateComponent));
        component.CurrentBattleState = newCurrentBattleState;
        component.PreviousBattleState = newPreviousBattleState;
        AddComponent(index, component);
    }

    public void ReplaceBattleState(Entitas.Battle.Enums.BattleState newCurrentBattleState, Entitas.Battle.Enums.BattleState newPreviousBattleState) {
        var index = GameComponentsLookup.BattleState;
        var component = (BattleStateComponent)CreateComponent(index, typeof(BattleStateComponent));
        component.CurrentBattleState = newCurrentBattleState;
        component.PreviousBattleState = newPreviousBattleState;
        ReplaceComponent(index, component);
    }

    public void RemoveBattleState() {
        RemoveComponent(GameComponentsLookup.BattleState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBattleState;

    public static Entitas.IMatcher<GameEntity> BattleState {
        get {
            if (_matcherBattleState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BattleState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBattleState = matcher;
            }

            return _matcherBattleState;
        }
    }
}
