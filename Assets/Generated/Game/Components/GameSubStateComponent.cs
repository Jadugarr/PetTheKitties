//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity subStateEntity { get { return GetGroup(GameMatcher.SubState).GetSingleEntity(); } }
    public SubStateComponent subState { get { return subStateEntity.subState; } }
    public bool hasSubState { get { return subStateEntity != null; } }

    public GameEntity SetSubState(SubState newPreviousSubState, SubState newCurrentSubState) {
        if (hasSubState) {
            throw new Entitas.EntitasException("Could not set SubState!\n" + this + " already has an entity with SubStateComponent!",
                "You should check if the context already has a subStateEntity before setting it or use context.ReplaceSubState().");
        }
        var entity = CreateEntity();
        entity.AddSubState(newPreviousSubState, newCurrentSubState);
        return entity;
    }

    public void ReplaceSubState(SubState newPreviousSubState, SubState newCurrentSubState) {
        var entity = subStateEntity;
        if (entity == null) {
            entity = SetSubState(newPreviousSubState, newCurrentSubState);
        } else {
            entity.ReplaceSubState(newPreviousSubState, newCurrentSubState);
        }
    }

    public void RemoveSubState() {
        subStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public SubStateComponent subState { get { return (SubStateComponent)GetComponent(GameComponentsLookup.SubState); } }
    public bool hasSubState { get { return HasComponent(GameComponentsLookup.SubState); } }

    public void AddSubState(SubState newPreviousSubState, SubState newCurrentSubState) {
        var index = GameComponentsLookup.SubState;
        var component = (SubStateComponent)CreateComponent(index, typeof(SubStateComponent));
        component.PreviousSubState = newPreviousSubState;
        component.CurrentSubState = newCurrentSubState;
        AddComponent(index, component);
    }

    public void ReplaceSubState(SubState newPreviousSubState, SubState newCurrentSubState) {
        var index = GameComponentsLookup.SubState;
        var component = (SubStateComponent)CreateComponent(index, typeof(SubStateComponent));
        component.PreviousSubState = newPreviousSubState;
        component.CurrentSubState = newCurrentSubState;
        ReplaceComponent(index, component);
    }

    public void RemoveSubState() {
        RemoveComponent(GameComponentsLookup.SubState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSubState;

    public static Entitas.IMatcher<GameEntity> SubState {
        get {
            if (_matcherSubState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SubState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSubState = matcher;
            }

            return _matcherSubState;
        }
    }
}
